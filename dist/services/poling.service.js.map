{"version":3,"file":"poling.service.js","sourceRoot":"","sources":["../../src/services/poling.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,8BAA8B,CAAC;AACtC,OAAO,yBAAyB,CAAC;AACjC,OAAO,4BAA4B,CAAC;AACpC,OAAO,6BAA6B,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAIvC;IACE,wBAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;IAAG,CAAC;IAEpC,mFAAmF;IACnF,gCAAO,GAAP,UACE,SAA8B,EAC9B,SAAwB;QAF1B,iBAoCC;QAlCC,0BAAA,EAAA,gBAAwB;QAExB,IAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC9B,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;YACrD,IAAI,GAAiB,CAAC;YACtB,KAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAC1B,IAAM,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC;gBACvB,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC;qBACjC,QAAQ,CAAC,SAAS,CAAC;qBACnB,SAAS,CAAC;oBACT,IAAI,YAAC,MAAM;wBACT,IAAI,CAAC,GAAG,CAAC;4BACP,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACxB,CAAC,CAAC,CAAC;oBACL,CAAC;oBACD,KAAK,YAAC,GAAG;wBACP,IAAI,CAAC,GAAG,CAAC;4BACP,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACtB,CAAC,CAAC,CAAC;oBACL,CAAC;iBACF,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,OAAO;gBACL,IAAI,GAAG,EAAE;oBACP,GAAG,CAAC,WAAW,EAAE,CAAC;iBACnB;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM;aACV,SAAS,CAAC,OAAO,CAAC;aAClB,QAAQ,EAAE;aACV,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;IACxB,CAAC;IAxCU,cAAc;QAD1B,UAAU,EAAE;iDAEe,MAAM;OADrB,cAAc,CAyC1B;IAAD,qBAAC;CAAA,AAzCD,IAyCC;SAzCY,cAAc","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/multicast';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Injectable()\nexport class PoolingService {\n  constructor(private zone: NgZone) {}\n\n  // NOTE: Running the interval outside Angular ensures that e2e tests will not hang.\n  execute<T>(\n    operation: () => Observable<T>,\n    frequency: number = 1000\n  ): Observable<T> {\n    const subject = new Subject();\n    const source = Observable.create((observer: Observer<T>) => {\n      let sub: Subscription;\n      this.zone.runOutsideAngular(() => {\n        const zone = this.zone;\n        sub = Observable.interval(frequency)\n          .mergeMap(operation)\n          .subscribe({\n            next(result) {\n              zone.run(() => {\n                observer.next(result);\n              });\n            },\n            error(err) {\n              zone.run(() => {\n                observer.error(err);\n              });\n            }\n          });\n      });\n\n      return () => {\n        if (sub) {\n          sub.unsubscribe();\n        }\n      };\n    });\n\n    return source\n      .multicast(subject)\n      .refCount()\n      .merge(operation());\n  }\n}\n"]}