{"version":3,"file":"open-weather-map.api.service.js","sourceRoot":"","sources":["../../../../src/services/api/open-weather-map/open-weather-map.api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient as Http } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TemperatureScale } from '../../../components/weather-current-temperature/current-temperature.component';\nimport { PoolingService } from '../../poling.service';\nimport {\n  CurrentWeather,\n  Forecast,\n  WeatherApiConfig,\n  WeatherApiService\n} from '../weather.api.service';\nimport { iconCodes, IconCodeType } from './open-weather-map-to-weather-icons';\nimport { WeatherQueryParams } from '../../../weather.interfaces';\n\n@Injectable()\nexport class OpenWeatherMapApiService extends WeatherApiService {\n  iconCodes: IconCodeType;\n  // iconCodes$: Observable<any>;\n  constructor(\n    protected http: Http,\n    protected poolingService: PoolingService,\n    public apiConfig: WeatherApiConfig\n  ) {\n    super(http, poolingService, apiConfig);\n    this.iconCodes = iconCodes;\n  }\n\n  protected mapQueryParams(\n    params: WeatherQueryParams\n  ): OpenWeatherMapLocationRequest {\n    const mapped: OpenWeatherMapLocationRequest = {\n      id: params.cityId,\n      q: params.cityName,\n      lat: params.latLng ? params.latLng.lat : undefined,\n      lon: params.latLng ? params.latLng.lng : undefined,\n      zip: params.zipCode,\n      units: params.units ? this.mapUnits(params.units) : undefined,\n      lang: params.lang\n    };\n    return mapped;\n  }\n\n  protected mapCurrentWeatherResponse(\n    response: OpenWeatherMapCurrentWeatherResponse\n  ): CurrentWeather {\n    if (!response) {\n      return <CurrentWeather>{};\n    }\n    const weather: CurrentWeather = {\n      temp: response.main.temp,\n      pressure: response.main ? response.main.pressure : undefined,\n      humidity: response.main ? response.main.humidity : undefined,\n      minTemp:\n        response.main && response.main.temp\n          ? response.main.temp_min\n          : undefined,\n      maxTemp:\n        response.main && response.main.temp\n          ? response.main.temp_max\n          : undefined,\n      sunrise: response.sys ? response.sys.sunrise : undefined,\n      sunset: response.sys ? response.sys.sunset : undefined,\n      location: response.name,\n      iconUrl: this.mapResponseToIconUrl(response),\n      iconClass: this.mapResponseToIconClass(response),\n      description: response.weather[0].description,\n      wind: {\n        deg: response.wind.deg,\n        speed: response.wind.speed\n      }\n    };\n    return weather;\n  }\n\n  protected mapForecastResponse(\n    response: OpenWeatherMapForecastResponse\n  ): Forecast[] {\n    if (!response) {\n      return <Forecast[]>[];\n    }\n    const city = response.city;\n    return response.list.map((el: OpenWeatherMapForecastResponseElement) => {\n      const forecast: Forecast = {\n        temp: el.main.temp,\n        pressure: el.main.pressure,\n        humidity: el.main.humidity,\n        minTemp: el.main.temp_min,\n        maxTemp: el.main.temp_max,\n        location: city.name,\n        iconClass: this.mapResponseToIconClass(el),\n        description: el.weather[0].description,\n        data: new Date(el.dt * 1000),\n        wind: {\n          deg: el.wind.deg,\n          speed: el.wind.speed\n        }\n      };\n      return forecast;\n    });\n  }\n\n  protected mapResponseToIconUrl(\n    response: OpenWeatherMapCurrentWeatherResponse\n  ): string {\n    return `http://openweathermap.org/img/w/${response.weather[0].icon}.png`;\n  }\n\n  protected mapResponseToIconClass(\n    response:\n      | OpenWeatherMapCurrentWeatherResponse\n      | OpenWeatherMapForecastResponseElement\n  ): string {\n    const code = response.weather[0].id;\n    const prefix = 'wi wi-';\n    let icon = iconCodes[code].icon;\n    // If we are not in the ranges mentioned above, add a day/night prefix.\n    if (!(code > 699 && code < 800) && !(code > 899 && code < 1000)) {\n      icon = 'day-' + icon;\n    }\n    icon = prefix + icon;\n    return icon;\n  }\n\n  protected setTokenKey() {\n    return 'APPID';\n  }\n\n  private mapUnits(unit: TemperatureScale) {\n    switch (unit) {\n      case TemperatureScale.CELCIUS:\n        return 'metric';\n      case TemperatureScale.FAHRENHEIT:\n        return 'imperial';\n      case TemperatureScale.KELVIN:\n        return;\n      default:\n        return 'metric';\n    }\n  }\n}\n\nexport interface OpenWeatherMapLocationRequest {\n  id?: number;\n  q?: string;\n  lat?: number;\n  lon?: number;\n  zip?: number | string;\n  units?: 'imperial' | 'metric';\n  lang?: string;\n}\n\nexport interface OpenWeatherMapCurrentWeatherResponse {\n  coord: { lon: number; lat: number };\n  weather: [{ id: number; main: string; description: string; icon: string }];\n  base: string;\n  main: {\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n  };\n  visibility: number;\n  wind: { speed: number; deg: number };\n  clouds: { all: number };\n  dt: number;\n  sys: {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n  };\n  id: number;\n  name: string;\n  cod: number;\n}\n\nexport interface OpenWeatherMapForecastResponse {\n  city: {\n    coord: {\n      lat: number;\n      lon: number;\n    };\n    country: string;\n    id: number;\n    name: string;\n  };\n  message: number;\n  cod: string;\n  cnt: number;\n  list: OpenWeatherMapForecastResponseElement[];\n}\n\nexport interface OpenWeatherMapForecastResponseElement {\n  clouds: {\n    all: number;\n  };\n  dt: number;\n  dt_txt: string;\n  main: {\n    grnd_level: number;\n    temp: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n    temp_kf: number;\n    sea_level: number;\n  };\n  sys: {\n    pod: string;\n  };\n  weather: [{ id: number; main: string; description: string; icon: string }];\n  wind: { speed: number; deg: number };\n}\n"]}