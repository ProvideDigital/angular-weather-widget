{"version":3,"file":"weather.api.service.js","sourceRoot":"","sources":["../../../src/services/api/weather.api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport {\n  HttpHeaders,\n  HttpClient,\n  HttpHandler,\n  HttpEvent,\n  HttpParams\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { PoolingService } from '../poling.service';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/first';\nimport { map, tap, filter, catchError, timeout } from 'rxjs/operators';\nimport { WeatherQueryParams } from '../../weather.interfaces';\n\nexport enum WeatherApiName {\n  OPEN_WEATHER_MAP = <any>'Open Weather Map'\n}\n\nexport class WeatherApiConfig {\n  name: WeatherApiName = WeatherApiName.OPEN_WEATHER_MAP;\n  key = 'Some Api Key';\n  baseUrl = 'http://api.openweathermap.org/data/2.5';\n}\n\n@Injectable()\nexport abstract class WeatherApiService {\n  poollingInterval = 60000 * 60;\n  constructor(\n    protected http: HttpClient,\n    protected poolingService: PoolingService,\n    @Inject('WEATHER_CONFIG') public apiConfig: WeatherApiConfig\n  ) {}\n\n  currentWeather(queryParams: WeatherQueryParams): Observable<CurrentWeather> {\n    return this.callApi(queryParams, 'weather').map(\n      this.mapCurrentWeatherResponse.bind(this)\n    );\n  }\n\n  forecast(queryParams: WeatherQueryParams): Observable<Forecast[]> {\n    return this.callApi(queryParams, 'forecast').map(\n      this.mapForecastResponse.bind(this)\n    );\n  }\n\n  protected callApi(\n    queryParams: WeatherQueryParams,\n    endpoint: string\n  ): Observable<any> {\n    const params = this.mapQueryParams(queryParams);\n\n    const requestOptions = this.getRequestOptions(params);\n\n    const apiCall = this.http\n      .get(`${this.apiConfig.baseUrl}/${endpoint}`, requestOptions)\n      .pipe(\n        map(resp => resp),\n        filter(el => !!el)\n      );\n\n    return this.wrapWithPoll(apiCall);\n  }\n\n  protected setTokenKey(): string {\n    // Implement it in child service\n    return '';\n  }\n\n  protected mapQueryParams(params: WeatherQueryParams): any {\n    // Implement it in child service\n    return;\n  }\n\n  protected mapCurrentWeatherResponse(response: any): CurrentWeather {\n    // Implement it in child service\n    return <CurrentWeather>{};\n  }\n\n  protected mapForecastResponse(response: any): Forecast[] {\n    // Implement it in child service\n    return <Forecast[]>[];\n  }\n\n  protected mapResponseToIconUrl(response: any): string {\n    return '';\n  }\n  protected mapResponseToIconClass(response: any): string {\n    return '';\n  }\n\n  private wrapWithPoll(apiCall: Observable<any>) {\n    return this.poolingService.execute(() => apiCall, this.poollingInterval);\n  }\n\n  private getRequestOptions(queryParams: Object) {\n    return {\n      headers: new HttpHeaders(),\n      params: this.getQueryParams(queryParams)\n    };\n  }\n\n  private getQueryParams(obj: { [key: string]: any }): HttpParams {\n    let queryParams = new HttpParams();\n    queryParams = queryParams.set(this.setTokenKey(), this.apiConfig.key);\n\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] !== undefined) {\n        queryParams = queryParams.set(key.toString(), obj[key]);\n      }\n    }\n    return queryParams;\n  }\n}\n\nexport interface CurrentWeather {\n  location: string;\n  temp: number;\n  pressure?: number;\n  humidity?: number;\n  minTemp?: number;\n  maxTemp?: number;\n  sunrise?: number;\n  sunset?: number;\n  iconClass?: string;\n  iconUrl?: string;\n  description?: string;\n  wind?: {\n    deg: number;\n    speed: number;\n  };\n}\n\nexport interface Forecast extends CurrentWeather {\n  data: Date;\n}\n"]}