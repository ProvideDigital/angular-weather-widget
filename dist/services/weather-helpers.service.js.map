{"version":3,"file":"weather-helpers.service.js","sourceRoot":"","sources":["../../src/services/weather-helpers.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Forecast } from './api/weather.api.service';\r\nimport { ChartData } from 'chart.js';\r\nimport * as moment from 'moment';\r\n@Injectable()\r\nexport class WeatherHelpersService {\r\n  constructor() {}\r\n\r\n  groupForecastsByDay(list: Forecast[]): Array<Forecast[]> {\r\n    const map: { [key: string]: Forecast[] } = {};\r\n    let result: Array<Forecast[]> = [];\r\n    list.forEach(el => {\r\n      const day = el.data.getUTCDate();\r\n      if (!map[day]) {\r\n        map[day] = [el];\r\n      } else {\r\n        map[day].push(el);\r\n      }\r\n    });\r\n    result = Object.keys(map).map(key => map[key]);\r\n    return result;\r\n  }\r\n\r\n  // Fixme: This function generates wrong icon for average day weather.\r\n  // Weather icon is taken from first day measurement\r\n  reduceToAveragePerDay(list: Forecast[]) {\r\n    return list.reduce((prev: Forecast[], curr) => {\r\n      if (curr && !curr.data) {\r\n        prev.push(curr);\r\n        return prev;\r\n      }\r\n      const lastElement = function() {\r\n        return prev[prev.length - 1];\r\n      };\r\n      const prevDay = lastElement()\r\n        ? prev[prev.length - 1].data.getDay()\r\n        : null;\r\n      const currDay = curr.data.getDay();\r\n      if (currDay === prevDay) {\r\n        const result: Forecast = lastElement();\r\n        result.temp = (result.temp + curr.temp) / 2;\r\n        if (result.wind && curr.wind) {\r\n          result.wind = {\r\n            speed: (result.wind.speed + curr.wind.speed) / 2,\r\n            deg: (result.wind.deg + curr.wind.deg) / 2\r\n          };\r\n        }\r\n\r\n        if (result.humidity && curr.humidity) {\r\n          result.humidity = (result.humidity + curr.humidity) / 2;\r\n        }\r\n        if (result.pressure && curr.pressure) {\r\n          result.pressure = (result.pressure + curr.pressure) / 2;\r\n        }\r\n\r\n        prev[prev.length - 1] = result;\r\n        return prev;\r\n      } else {\r\n        prev.push(curr);\r\n        return prev;\r\n      }\r\n    }, []);\r\n  }\r\n\r\n  mapForecastToCharts(forecast: Forecast[], borderColor = '#aaa'): ChartData {\r\n    return forecast.reduce(\r\n      (prev: ChartData, curr: Forecast) => {\r\n        if (prev.labels) {\r\n          prev.labels.push(curr.data.toISOString());\r\n        }\r\n        if (prev.datasets && prev.datasets[0] && prev.datasets[0].data) {\r\n          const data: number[] = <number[]>prev.datasets[0].data;\r\n          data.push(curr.temp);\r\n        }\r\n\r\n        return prev;\r\n      },\r\n      <ChartData>{\r\n        labels: [moment().format(\"MM-DD\"), moment().format(\"MM-DD\"), moment().format(\"MM-DD\")],\r\n        datasets: [\r\n          {\r\n            data: [],\r\n            backgroundColor: ['rgba(0, 0, 0, 0.1)'],\r\n            borderColor: [borderColor],\r\n            borderWidth: 1\r\n          }\r\n        ],\r\n        options: {\r\n          scales: {\r\n            xAxes: [{\r\n              type: 'time',\r\n              distribution: 'linear'\r\n            }]\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  hexToRgbA(hex: string, opacity: string) {\r\n    let c: any;\r\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\r\n      c = hex.substring(1).split('');\r\n      if (c.length === 3) {\r\n        c = [c[0], c[0], c[1], c[1], c[2], c[2]];\r\n      }\r\n      c = '0x' + c.join('');\r\n      return `rgba(${[(c >> 16) & 255, (c >> 8) & 255, c & 255].join(\r\n        ','\r\n      )},${opacity})`;\r\n    }\r\n  }\r\n}\r\n"]}