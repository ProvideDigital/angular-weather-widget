{"version":3,"file":"weather.container.js","sourceRoot":"","sources":["../src/weather.container.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport {\n  CurrentWeather,\n  Forecast,\n  WeatherApiService\n} from './services/api/weather.api.service';\nimport {\n  WeatherLayout,\n  WeatherQueryParams,\n  WeatherSettings\n} from './weather.interfaces';\n\n@Component({\n  selector: 'weather-widget',\n  changeDetection: ChangeDetectionStrategy.Default,\n  styles: [\n    `\n      :host {\n        display: flex;\n        position: relative;\n        padding: 1em;\n        box-sizing: border-box;\n      }\n      .info {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n      }\n      .info.wide {\n        flex-direction: row;\n      }\n      .wide .current {\n        flex-grow: 0;\n      }\n      .wide .forecast {\n        flex-grow: 1;\n        overflow-y: auto;\n        height: 100%;\n      }\n      .current {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        min-width: 140px;\n      }\n      .forecast {\n        min-width: 200px;\n        width: 100%;\n        overflow-y: auto;\n      }\n      .current,\n      .forecast {\n        padding: 0.5em;\n      }\n      weather-actions {\n        display: block;\n        position: absolute;\n        top: 10px;\n        right: 10px;\n      }\n      weather-current-temperature.big {\n        font-size: 3em;\n      }\n      weather-icon.big {\n        font-size: 6em;\n        padding: 0.15em;\n      }\n      .empty {\n        flex-direction: row;\n      }\n      .empty i {\n        font-size: 3em;\n        margin-right: 0.3em;\n      }\n    `\n  ],\n  template: `\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons-wind.min.css\"\n    />\n    <div *ngIf=\"currentWeather\" class=\"info\" [class.wide]=\"isWideLayout\">\n      <div class=\"current\">\n        <weather-icon\n          class=\"big\"\n          [iconImageUrl]=\"currentWeather?.iconUrl\"\n          [iconClass]=\"currentWeather?.iconClass\"\n        ></weather-icon>\n        <weather-current-description\n          [descripion]=\"currentWeather?.description\"\n        ></weather-current-description>\n        <weather-current-wind\n          *ngIf=\"settings.showWind\"\n          [scale]=\"settings.scale\"\n          [deg]=\"currentWeather?.wind.deg\"\n          [speed]=\"currentWeather?.wind.speed\"\n        ></weather-current-wind>\n        <weather-location [place]=\"currentWeather?.location\"></weather-location>\n        <weather-current-temperature\n          class=\"big\"\n          [temp]=\"currentWeather?.temp\"\n          [deg]=\"settings.scale\"\n        ></weather-current-temperature>\n        <weather-current-details\n          *ngIf=\"settings.showDetails\"\n          [maxTemp]=\"currentWeather?.maxTemp\"\n          [minTemp]=\"currentWeather?.minTemp\"\n          [pressure]=\"currentWeather?.pressure\"\n          [humidity]=\"currentWeather?.humidity\"\n        ></weather-current-details>\n      </div>\n      <div class=\"forecast\" *ngIf=\"settings.showForecast\">\n        <weather-forecast\n          [forecast]=\"forecast\"\n          [settings]=\"settings\"\n          [mode]=\"settings.forecastMode\"\n        ></weather-forecast>\n      </div>\n    </div>\n    <div *ngIf=\"!currentWeather\" class=\"info empty\">\n      <i class=\"wi wi-sunrise\"></i>\n      No weather data...\n    </div>\n    <weather-actions\n      *ngIf=\"isMouseOn\"\n      (update)=\"getWeather()\"\n    ></weather-actions>\n  `\n}) // tslint:disable-next-line:component-class-suffix\nexport class WeatherContainer implements OnDestroy {\n  @HostBinding('style.background') background: string;\n  @HostBinding('style.color') color: string;\n  @HostBinding('style.width') width = 'auto';\n  @HostBinding('style.height') height = 'auto';\n\n  @Input() forecast: Forecast[] | null;\n  @Input() currentWeather: CurrentWeather | null;\n  @Input()\n  set settings(value: WeatherSettings) {\n    if (!value) {\n      return;\n    }\n    this._settings = value;\n    this.background = this._settings.backgroundColor || 'white';\n    this.color = this._settings.color || 'black';\n    this.width = this._settings.width;\n    this.height = this._settings.height;\n    if (this.weatherApi.apiConfig.name && this.weatherApi.apiConfig.key) {\n      this.getWeather();\n    }\n    if (this._settings.layout) {\n      this.isWideLayout = this._settings.layout === WeatherLayout.WIDE;\n    }\n  }\n\n  get settings(): WeatherSettings {\n    return this._settings;\n  }\n\n  isWideLayout = false;\n  subscriptionCurrentWeather: Subscription;\n  subscriptionForecast: Subscription;\n  currentWeather$: Observable<CurrentWeather>;\n  forecast$: Observable<Forecast[]>;\n  isMouseOn: boolean;\n\n  private _settings: WeatherSettings;\n\n  constructor(\n    private weatherApi: WeatherApiService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private renderer: Renderer2,\n    private element: ElementRef\n  ) {}\n\n  ngOnDestroy() {\n    if (this.subscriptionCurrentWeather) {\n      this.subscriptionCurrentWeather.unsubscribe();\n    }\n    if (this.subscriptionForecast) {\n      this.subscriptionForecast.unsubscribe();\n    }\n  }\n\n  @HostListener('mouseenter')\n  private onMouseEnter() {\n    this.renderer.addClass(this.element.nativeElement, 'active');\n    this.isMouseOn = true;\n  }\n  @HostListener('mouseleave')\n  private onMouseLeave() {\n    this.renderer.removeClass(this.element.nativeElement, 'active');\n    this.isMouseOn = false;\n  }\n\n  getWeather(): void {\n    if (this.subscriptionCurrentWeather) {\n      this.subscriptionCurrentWeather.unsubscribe();\n    }\n    if (this.subscriptionForecast) {\n      this.subscriptionForecast.unsubscribe();\n    }\n    this.currentWeather$ = this.currentWeatherCall();\n    this.forecast$ = this.forecastCall();\n    this.subscriptionCurrentWeather = this.currentWeather$.subscribe(data => {\n      this.currentWeather = data;\n      this.changeDetectorRef.markForCheck();\n    });\n    this.subscriptionForecast = this.forecast$.subscribe(data => {\n      this.forecast = data;\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  currentWeatherCall(): Observable<CurrentWeather> {\n    const params: WeatherQueryParams = Object.assign(\n      {},\n      this.settings.location,\n      { units: this.settings.scale },\n      { lang: this.settings.language }\n    );\n    return this.weatherApi.currentWeather(params);\n  }\n\n  forecastCall(): Observable<Forecast[]> {\n    const params: WeatherQueryParams = Object.assign(\n      {},\n      this.settings.location,\n      { units: this.settings.scale },\n      { lang: this.settings.language }\n    );\n    return this.weatherApi.forecast(params);\n  }\n}\n"]}